<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "docbookx.dtd">
<book>
  <title><command>hamfax</command>documentation</title>

  <bookinfo>
    <abstract>
      <para><command>hamfax</command> is an application for sending
      and receiving radio facsimiles. It is available under the terms
      of the <glossterm>GPL</glossterm> and shoule work on all
      unix-like systems.</para>
    </abstract>
    <authorgroup>
      <author>
        <firstname>Christof</firstname><surname>Schmitt</surname>
        <othername>(DH1CS)</othername>
        <affiliation>
          <jobtitle>initial author</jobtitle>
          <address><email>cschmitt@users.sourceforge.net</email></address>
        </affiliation>
      </author>
    </authorgroup>
  </bookinfo>

  <chapter>
    <title>About</title>

    <section>
      <title>The application</title>

      <para><command>hamfax</command> is an application for sending
      and receiving facsimilies in amateur radio. You can either use a
      sound card as interface to the transceiver or a SCS-PTC-II.
      Receiving of weather facsimile broadcasts is also
      possible.</para>

      <para>The program is licensed under the terms of the GNU General
      Public License. See <ulink url="http://hamfax.sourceforge.net/"/>
      for further information and new releases.</para>
    </section>

    <section>
      <title>Software dependencies</title>
      <itemizedlist>
        <listitem>
          <simpara><glossterm>audiofile</glossterm> library for
          locally testing input and output.</simpara>
        </listitem>
        <listitem>
          <simpara><glossterm>Qt toolkit</glossterm></simpara>
        </listitem>
        <listitem>
          <simpara>Support for <glossterm>OSS</glossterm> or something
          compatible.</simpara>
        </listitem>
      </itemizedlist>

      <para>These dependencies are nothing to worry about, since they
      have been included in Linux distributions for several years now.
      Probably <command>hamfax</command> is even included in your
      current distribution or operating system.</para>

    </section>
    <section>
      <title>Supported interfaces</title>

      <para>Currently these interfaces for sending and receiving are
      supported:</para>

      <itemizedlist>
        <listitem>
          <simpara>Soundcard supported by <glossterm>OSS</glossterm>.</simpara>
        </listitem>
        <listitem>
          <simpara><glossterm>PTC</glossterm> from
          <glossterm>SCS</glossterm> as external interface.</simpara>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter>
    <title>Facsimiles</title>

    <para>Facsimiles are pictures which are transmitted line by line.
    The sending and receiving station have to agree on the
    transmission speed (<glossterm>LPM</glossterm>) and the
    <glossterm>IOC</glossterm> which corresponds the line width. The
    information transmitted is the brightness of the current
    position.</para>

    <para>The beginning of a transmission is marked with a
    <glossterm>APT</glossterm> start signal. Usually this is a
    black/white pattern which changes between black and white at
    300Hz.</para>
  </chapter>

  <chapter>
    <title>Short Wave Facsimiles</title> 

    <figure float="1" id="example">
      <title>Example</title>
      <graphic fileref="example.png" scalefit="1" align="center"/>
    </figure>

    <para>Facsimiles on short wave are frequency modulated, that means
    the frequency of the carrier is changing with the transmitted
    information (the current brightness). Usually the deviation is
    400Hz, so the frequency for white is 800Hz higher than the one for
    black.</para>

    <para><xref linkend="example"/> shows an example weather map. For
    information about stations broadcasting weather maps, see the
    program's homepage.</para>

    <figure float="1">
      <title>demod</title>
      <literallayout class="monospaced">
                                    I_t       I_{t-1}
             +----------+  +-------+     +----+  +---+
          +->|*sin(f_c) |->|FIR-LPF|--*->|z^-1|->|mul|--+
          |  +----------+  +-------+  |  +----+  +---+  |
          |                           *-->--     /      |
          |                           |     \   /       |+  y_{t-1}
          |                  +-------------+ \ /      +---+   +----+
   input--+                  |normalization|  X       |add|-->|asin|--out
          |                  +-------------+ / \      +---+   +----+       
          |                           |     /   \       |-
          |                           *-->--     \      |
          |  +----------+  +-------+  |  +----+  +---+  |
          +->|*cos(f_c )|->|FIR-LPF|--*->|z^-1|->|mul|--+
             +----------+  +-------+     +----+  +---+
                                    Q_t       Q_{t-1}
        
      </literallayout>
    </figure>
  </chapter>

  <chapter>
    <title>Weather Satellites</title>

    <para>For receiving facsimiles from a weather satellite a suitable
    FM receiver is needed. The output of this receiver is a amplitude
    modulated signal where the maximum amplitude corresponds to white
    and no amplitude means black.</para>
  </chapter>

  <chapter>
    <title>Using <command>hamfax</command></title>

    <section>
      <title>Interface Setup</title>

      <para>You can either use a SCS PTC-II as modulator and
      demodulator or connect a sound card to your transceiver. For the
      PTC refer to the manual, especially the chapter about
      interfacing transceiver, PTC and computer. When using a sound
      card you need to connect line-out to the microphone input (or
      something similar) of the transceiver and line-in to some output
      of the transceiver. The RTS signal of a serial port can be used
      to key the PTT as it is often use for PSK31. A simple transistor
      is often enough to do the job.</para>

      <para>For both interfaces you have to switch your transceiver to
      USB (upper side band). In <command>hamfax</command> set carrier
      to 1900kHz and tune your transceiver 1900kHz below the desired
      frequency.</para>
    </section>

    <section>
      <title>Receiving Facsimiles</title>

      <para>Set deviation, modulation apt start and stop frequencies,
      lpm, the type of phasing lines (normal or inverted) and the
      mono/color switch to the appropriate values. Then choose the
      desired interface in the receive menu and see what happens.
      :)</para>

      <para>If the apt start tone is not detected properly or you
      missed it you can skip it by clicking the skip button. If you
      missed the phasing lines you can skip the phasing detection and
      the value from the lpm checkbox is used.</para>

      <para>While receiving the raw data is stored in memory. So it is
      possible to correct the received image with the menu items in
      the Image menu. The image can be saved in any format supported
      by Qt.</para>
    </section>

    <section>
      <title>Sending Facsimiles</title>

      <para>Load the image from somewhere. Then set the control items
      to the desired values and scale the image to the desired IOC.
      Just select the right item from the transmit menu and you are on
      the way.</para>
    </section>
  </chapter>

  <chapter>
    <title>Communication with drivers</title>
    <section>
      <title>Purpose</title>

      <para>Drivers here refer to small helper programs that
      implemented the low level part of external communication. For
      transmitting they read unmodulated image data on stdin for
      sending it as facsimile. For receiption they write demodulated
      data to stdout.</para>

      <para>To ease debugging and for the possible access from
      scripting language a simple text based protocol is used.</para>

      <para>Each driver expects parameters on its command line on
      startup. Then it prints the chosen sample rate on stdout
      (because the value might be chosen from the driver for some
      reason) and finally starts transmitting or receiving, depending
      on the current mode.</para>

    </section>

    <section>
      <title>Format</title>

      <para>The first lines report current parameters:</para>

      <screen>
        hamfax hamfaxdsp
        mode receive
        rate 8000
      </screen>

      <para>The first line is <quote>hamfax</quote> followed by the
      name of the driver. The second line is <quote>mode</quote>
      followed by <quote>receive</quote> or <quote>transmit</quote> to
      indicate the current mode of operation. The third line is
      <quote>rate</quote> followed by the sample rate of the data
      (samples per second).</para>

      <para>On receiption this is followed by the real data. The
      samplerate has been defined by the header above. Each sample is
      in the range from 0 to 255 and is printed as two hex digits. One
      whitespace or a newline seperates the samples. Using less than
      80 character per column also makes the format fit on text
      terminals (useful for debugging). So the data looks like
      this:</para>

      <screen>
        FA BC 78 23 9B
      </screen>

      <para>For transmitting the same data format is used, the data is
      only passed to the driver on stdin.</para>

      <para>Errors are printed on stdout instead of the
      <quote>rate</quote> parameter. The format is
      <quote>error</quote> followed by the failed function and the
      error description (usually obtained from
      <function>strerror()</function>), e.g.:</para>

      <screen>
        hamfax hamfaxdsp
        mode transmit
        error open No such file or directory
      </screen>

    </section>
  </chapter>

</book>
